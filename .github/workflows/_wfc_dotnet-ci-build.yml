name: dotnet-build

on:
  workflow_call:
    inputs:
      solutionName:
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: false
      SONAR_PROJECT_KEY:
        required: false
      SONAR_ORGANISATION_KEY:
        required: false
      VIRUSTOTAL_API_KEY:
        required: false
      CODECOV_TOKEN:
        required: false

jobs:
  build:
    runs-on: windows-2025
    outputs:
      nbgv: ${{ steps.nbgv.outputs.SemVer2 }}
      change_commit_log: ${{ steps.changelog.outputs.commitLog }}
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      solutionpath: ${{ inputs.solutionName }}.sln
      unittestprojectpath: ${{ inputs.solutionName }}.UnitTests/${{ inputs.solutionName }}.UnitTests.csproj
      inttestprojectpath: ${{ inputs.solutionName }}.IntegrationTests/${{ inputs.solutionName }}.IntegrationTests.csproj
      benchmarkprojectpath: ${{ inputs.solutionName }}.Benchmarks/${{ inputs.solutionName }}.Benchmarks.csproj
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Verify the ref context
        run: echo 'Ref Context is ${{ github.ref }}'
      - name: Verify the head ref context
        run: echo 'Head Ref Context is ${{ github.head_ref }}'
      - name: Setup Java 17
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3.2.2
      - name: Install Android SDK
        run: |
          $sdkmanagerpath = Get-ChildItem "C:\Android\android-sdk\cmdline-tools\**\bin\sdkmanager.bat" | Select-Object -First 1
          if ($sdkmanagerpath -eq $null) {
              throw "Unable to find android sdk manager"
          }
          echo $sdkmanagerpath
          . $sdkmanagerpath --install "platforms;android-30"
      - name: Install .NET
        uses: actions/setup-dotnet@v5
        with:
          global-json-file: "./global.json"
      - name: Install DotNet workloads
        shell: bash
        run: |
          dotnet workload install android aspire ios tvos macos maui
          dotnet workload list
        working-directory: src
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@767f00a3f09872d96a0cb9fcd5e6a4ff33311330
      - name: Cleanup nuget local storage
        run: |
          dotnet nuget locals all --clear
          dotnet nuget remove source "Microsoft Visual Studio Offline Packages"
        working-directory: src
      - name: NBGV
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          setAllVars: true
      - name: Install dotnet tools
        run: dotnet tool restore
        working-directory: src
      - name: Prepare Artifact Directory
        run: |
          mkdir artifacts
          mkdir artifacts\nupkg
          mkdir artifacts\outdated
          mkdir artifacts\sbom
      - name: Restore Packages
        run: |
          dotnet restore ${{ env.solutionpath }} -- /bl:${{ github.workspace }}\artifacts\binlog\restore.binlog
        working-directory: src
      - name: Changelog
        uses: glennawatson/ChangeLog@v1
        id: changelog
      - name: Report Changelog Summary
        run: |
          $changecommitlog = $Env:CHANGE_COMMIT_LOG
          $changecommitlog = $changecommitlog.Replace('"', '''')
          $lines = $changecommitlog -split [Environment]::NewLine
          foreach ($line in $lines)
          {
            echo "::notice::$line"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $line
          }
        env:
          CHANGE_COMMIT_LOG : ${{ steps.changelog.outputs.commitLog }}
      - name: Run Sonar Scanner begin
        if: env.SONAR_TOKEN != '' && env.SONAR_PROJECT_KEY != '' && env.SONAR_ORGANISATION_KEY != ''
        run: |
          dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /d:sonar.login="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /o:"${{ env.SONAR_ORGANISATION_KEY }}" /d:sonar.cs.opencover.reportsPaths="${{ github.workspace }}/artifacts/unittestcoverage/**/*.xml"
        working-directory: src
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANISATION_KEY: ${{ secrets.SONAR_ORGANISATION_KEY }}
      - name: Run Build
        id: run-build
        run: |
          dotnet build ${{ env.solutionpath }} --configuration Release --no-restore /bl:${{ github.workspace }}/artifacts/binlog/build.binlog /p:ContinuousIntegrationBuild=true 
        working-directory: src
        env:
          CHANGE_COMMIT_LOG: ${{ steps.changelog.outputs.commitLog }}
      - name: Run Unit Tests
        working-directory: src
        run: |
          dotnet test ${{ env.unittestprojectpath }} --verbosity normal --configuration Release --no-build /bl:${{ github.workspace }}\artifacts/binlog/unittest.binlog --nologo --logger GitHubActions -- --coverage --coverage-output-format cobertura --coverage-output coverage.xml --long-running 10 --results-directory ${{ github.workspace }}/artifacts/unittestcoverage
      - name: Run Sonar Scanner end
        if: env.SONAR_TOKEN != '' && env.SONAR_PROJECT_KEY != '' && env.SONAR_ORGANISATION_KEY != ''
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
        working-directory: src
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANISATION_KEY: ${{ secrets.SONAR_ORGANISATION_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run BinLogStats for Build
        if: ${{ always() && !cancelled() && (steps.run-build.outcome == 'success' || steps.run-build.outcome == 'failure') }}
        run: |
          dotnet gripe-msbuildlogstats -bl ../artifacts/binlog/build.binlog
        working-directory: src
      - name: Upload Code Coverage
        run: |
          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe
          .\codecov.exe -s 'artifacts/unittestcoverage' -f '*.xml' -v -t '${{ env.CODECOV_TOKEN }}'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Report Unit Test Coverage
        run: |
          $opencoverxmlpath = Get-ChildItem 'artifacts/unittestcoverage/coverage.xml' | Select-Object -First 1
          $unitTestCoverage = (Select-Xml -Path $opencoverxmlpath -XPath 'CoverageSession/Summary/@branchCoverage').Node.Value
          $coverageMessage = "Unit Test Coverage: $unitTestCoverage"
          echo "::notice::$coverageMessage"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $coverageMessage
      - name: Run Integration Tests
        run: |
          dotnet test ${{ env.inttestprojectpath }} --configuration Release --no-build --nologo /bl:../artifacts/binlog/inttest.binlog --logger "GitHubActions;verbosity=normal" -- --coverage --coverage-output-format cobertura --coverage-output coverage.xml --long-running 10 --results-directory ${{ github.workspace }}/artifacts/inttestcoverage
        working-directory: src
      - name: Report Integration Test Coverage
        run: |
          $opencoverxmlpath = Get-ChildItem 'artifacts/inttestcoverage/coverage.xml' | Select-Object -First 1
          $intTestCoverage = (Select-Xml -Path $opencoverxmlpath -XPath 'CoverageSession/Summary/@branchCoverage').Node.Value
          $coverageMessage = "Integration Test Coverage: $intTestCoverage"
          echo "::notice::$coverageMessage"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $coverageMessage
      - name: Produce Nuget Packages
        run: |
          dotnet pack ${{ env.solutionpath }} --configuration Release --no-build /bl:${{ github.workspace }}\artifacts\binlog\pack.binlog --nologo /p:PackageOutputPath=${{ github.workspace }}\artifacts\nuget /p:ContinuousIntegrationBuild=true
        working-directory: src
        env:
          CHANGE_COMMIT_LOG: ${{ steps.changelog.outputs.commitLog }}
      - name: Generate SBOM
        run: |
          dotnet sbom-tool generate -b artifacts/nuget -bc src -pn ${{ inputs.solutionName }} -pv $Env:NBGV_SimpleVersion -ps "DHGMS Solutions" -nsb https://sbom.dhgms.com -m artifacts\sbom
      - name: List outdated packages
        run: |
          dotnet outdated -o ${{ github.workspace }}\artifacts\outdated\outdated.json
        working-directory: src
      - name: VirusTotal Monitor Scan
        if: ${{ env.VIRUSTOTAL_API_KEY != 0 }}
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ env.VIRUSTOTAL_API_KEY }}
          vt_monitor: true
          monitor_path: /ghaction-virustotal
          files: |
            ./artifacts/nuget/*.nupkg
        env:
          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
      - name: store binlogs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: binlogs
          path: artifacts/binlog
      - name: store unit test coverage
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: unittestcoverage
          path: artifacts/unittestcoverage
          if-no-files-found: error
      - name: store nuget packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget
          path: artifacts/nuget
          if-no-files-found: error
      - name: store omd
        uses: actions/upload-artifact@v4
        with:
          name: omd
          path: artifacts/omd
      - name: store sbom
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: artifacts/sbom
      - name: store outdated
        uses: actions/upload-artifact@v4
        with:
          name: outdated
          path: artifacts/outdated
