name: Common .NET setup and build workflow

on:
  workflow_call:
    inputs:
      solutionName:
        required: true
        type: string
        description: 'Name of the solution file WITHOUT the extension. On top of running the build. It is ued to calculate the format of the unit tests, benchmarks and integration tests.'
      buildOs:
        required: false
        type: string
        default: 'linux'
        description: 'Primary OS for build and pack. Options: linux, windows. Default: linux'
      requiresMacOS:
        required: false
        type: boolean
        default: false
        description: 'If true, also builds and tests on macOS (never releases from macOS)'
    secrets:
      NUGET_API_KEY:
        required: false
        description: 'API key used to release NUGET packages'
      SONAR_TOKEN:
        required: false
      SONAR_PROJECT_KEY:
        required: false
      SONAR_ORGANISATION_KEY:
        required: false
      VIRUSTOTAL_API_KEY:
        required: false
      CODECOV_TOKEN:
        required: false

jobs:
  build:
    uses: ./.github/workflows/_wfc_dotnet-ci-build.yml
    with:
      solutionName: ${{ inputs.solutionName }}
      buildOs: ${{ inputs.buildOs }}
      requiresMacOS: ${{ inputs.requiresMacOS }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANISATION_KEY: ${{ secrets.SONAR_ORGANISATION_KEY }}
      VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  licenses:
    uses: ./.github/workflows/_wfc_dotnet-ci-licenses.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  snitch:
    uses: ./.github/workflows/_wfc_dotnet-ci-snitch.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  appinspector:
    uses: ./.github/workflows/_wfc_dotnet-ci-appinspector.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v5
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: always

  validate-renovate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dpvreony/github-action-renovate-config-validator@63c5f53df823879a6cd46a10d27fbe1d4ede7839

  omd-generation:
    uses: ./.github/workflows/_wfc_dotnet-ci-omd-generation.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  vulnerable-nuget-packages:
    uses: ./.github/workflows/_wfc_dotnet-ci-vulnerable-nuget-packages.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  deprecated-nuget-packages:
    uses: ./.github/workflows/_wfc_dotnet-ci-deprecated-nuget-packages.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  check-codeql-enabled:
    runs-on: ubuntu-latest
    outputs:
      codeql_enabled: ${{ steps.check.outputs.codeql_enabled }}
    permissions:
      contents: read
    steps:
      - name: Check if CodeQL should run
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if repository is public
          if [ "${{ github.event.repository.visibility }}" == "public" ]; then
            echo "Repository is public, CodeQL is available"
            echo "codeql_enabled=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # For private repos, check if Advanced Security is enabled
          echo "Repository is private, checking Advanced Security status..."
          
          # Use GitHub CLI to check if Advanced Security is enabled
          if command -v gh &> /dev/null; then
            security_status=$(gh api repos/${{ github.repository }} --jq '.security_and_analysis.advanced_security.status' 2>/dev/null || echo "unknown")
            
            if [ "$security_status" == "enabled" ]; then
              echo "Advanced Security is enabled"
              echo "codeql_enabled=true" >> "$GITHUB_OUTPUT"
            else
              echo "Advanced Security is not enabled or unavailable"
              echo "codeql_enabled=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "GitHub CLI not available, skipping Advanced Security check"
            echo "codeql_enabled=false" >> "$GITHUB_OUTPUT"
          fi

  codeql:
    needs: check-codeql-enabled
    if: needs.check-codeql-enabled.outputs.codeql_enabled == 'true'
    permissions:
      security-events: write
      actions: read
      contents: read
    uses: ./.github/workflows/_wfc_dotnet-ci-codeql.yml
    with:
      solutionName: ${{ inputs.solutionName }}

  check-nuget-api-key:
    runs-on: ubuntu-latest
    outputs:
      has_api_key: ${{ steps.check.outputs.has_api_key }}
    env:
      NUGET_API_KEY: ${{ secrets.nuget_api_key }}
    steps:
      - name: Check if NUGET_API_KEY is set
        id: check
        run: |
          if [ -n "$NUGET_API_KEY" ]; then
            echo "has_api_key=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_api_key=false" >> "$GITHUB_OUTPUT"
          fi
     
  check-nuget-environment:
    permissions:
      actions: read
      contents: read
      deployments: read
    runs-on: ubuntu-latest
    needs:
      check-nuget-api-key
    if: needs.check-nuget-api-key.outputs.has_api_key == 'true'
    steps:
      - name: Check if 'nuget' environment exists and has protection rules
        uses: dpvreony/ensure-environment-protected@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          environment_name: 'nuget'

  check-release-required:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      release_required: ${{ steps.check.outputs.release_required }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Check if release is required
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Try to get the latest release
          latest_release=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
          
          if [ -z "$latest_release" ]; then
            echo "No existing release found, release is required"
            echo "release_required=true" >> "$GITHUB_OUTPUT"
          else
            echo "Latest release: $latest_release"
            
            # Check if this build is older than the latest release
            # Get commit SHA for the latest release
            latest_sha=$(git rev-list -n 1 "$latest_release" 2>/dev/null || echo "")
            current_sha="${{ github.sha }}"
            
            if [ -n "$latest_sha" ]; then
              # Check if current commit is an ancestor of latest release
              # If current is an ancestor of latest, then latest is newer and we should not release
              if git merge-base --is-ancestor "$current_sha" "$latest_sha" 2>/dev/null; then
                echo "::warning::Current commit is older than the latest release ($latest_release). This build will not trigger a release."
                echo "release_required=false" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
            
            # Get diff between current commit and latest release tag
            # Check if there are changes in src/ excluding *.*Tests folders
            changed_files=$(git diff --name-only "$latest_release" HEAD -- src/ | grep -v '.*\..*Tests/' || true)
            
            if [ -n "$changed_files" ]; then
              echo "Changes detected in non-test files:"
              echo "$changed_files"
              echo "release_required=true" >> "$GITHUB_OUTPUT"
            else
              echo "No changes in non-test files, release not required"
              echo "release_required=false" >> "$GITHUB_OUTPUT"
            fi
          fi

  release:
    if: ${{ format('refs/heads/{0}', github.event.repository.default_branch) == github.ref && needs.check-release-required.outputs.release_required == 'true' }}
    permissions:
      contents: write
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    needs: [build, check-nuget-environment, check-release-required]
    environment:
      name: nuget
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
    steps:
    - name: Download NuGet Packages
      uses: actions/download-artifact@v5
      with:
        name: nuget
    - name: Create Release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ needs.build.outputs.nbgv }}
          release_name: ${{ needs.build.outputs.nbgv }}
          body: |
            ${{ needs.build.outputs.change_commit_log }}

    - name: NuGet Push
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
        SOURCE_URL: https://api.nuget.org/v3/index.json
      run: |
        dotnet nuget push -s ${{ env.SOURCE_URL }} -k ${{ env.NUGET_AUTH_TOKEN }} **/*.nupkg
